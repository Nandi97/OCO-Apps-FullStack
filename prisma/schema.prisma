generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  stopWatchItems StopWatchItem[]
  PurchaseOrder  PurchaseOrder[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Menu {
  id        Int       @id @default(autoincrement())
  name      String
  url       String
  icon      String
  listOrder Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  subMenus  SubMenu[]
}

model SubMenu {
  id        Int       @id @default(autoincrement())
  name      String
  url       String
  icon      String
  listOrder Int
  menuId    Int
  createdAt DateTime? @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)
  menu      Menu      @relation(fields: [menuId], references: [id])
}

model Matter {
  id          Int    @id @default(autoincrement())
  code        String
  description String

  deletedAt      DateTime?
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime?       @default(now())
  stopWatchItems StopWatchItem[]
}

model Team {
  id         Int       @id @default(autoincrement())
  name       String
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  staff      Staff[]
}

model Gender {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  staff     Staff[]
}

model Currency {
  id        Int      @id @default(autoincrement())
  name      String
  initial   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model StaffType {
  id           Int           @id @default(autoincrement())
  name         String
  createdAt    DateTime?     @db.Timestamp(0)
  updatedAt    DateTime?     @db.Timestamp(0)
  designations Designation[]
}

model Designation {
  id          Int       @id @default(autoincrement())
  name        String
  staffTypeId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  staffType   StaffType @relation(fields: [staffTypeId], references: [id])
  staff       Staff[]
}

model Staff {
  id            Int             @id @default(autoincrement())
  name          String
  email         String
  mobile        String
  ext           Int
  staffNo       Int
  avatarUrl     String?
  teamId        Int
  designationId Int
  genderId      Int
  deletedAt     DateTime?       @db.Timestamp(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?       @default(now())
  books         Book[]
  designation   Designation     @relation(fields: [designationId], references: [id])
  gender        Gender          @relation(fields: [genderId], references: [id])
  team          Team            @relation(fields: [teamId], references: [id])
  PurchaseOrder PurchaseOrder[]
}

model Book {
  id              Int       @id @default(autoincrement())
  author          String
  title           String
  coverUrl        String
  copies          Int
  edition         String
  isbnIssn        String
  mediaType       String
  publicationYear Int
  publisher       String
  subject         String?
  status          Boolean   @default(true)
  staffId         Int
  deletedAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?
  staff           Staff     @relation(fields: [staffId], references: [id])
}

model StopWatchItemTask {
  id             Int             @id @default(autoincrement())
  name           String
  stopWatchItems StopWatchItem[]
}

model StopWatchItem {
  id                  Int       @id @default(autoincrement())
  narration           String
  itemDate            DateTime?
  startedAt           DateTime?
  endedAt             DateTime?
  createdById         String
  stopWatchItemTaskId Int
  matterId            Int

  matter            Matter            @relation(fields: [matterId], references: [id])
  stopWatchItemTask StopWatchItemTask @relation(fields: [stopWatchItemTaskId], references: [id])
  user              User              @relation(fields: [createdById], references: [id])

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
}

model PurchaseOrder {
  id                Int            @id @default(autoincrement())
  vendorType        String
  vatable           Boolean        @default(true)
  currencyId        Int
  vendorName        String
  vendorEmail       String
  vendorPhoneNumber String
  vendorAddress     String
  purchaseItems     PurchaseItem[]
  approverId        Int
  createdById       String

  approver Staff @relation(fields: [approverId], references: [id])
  creator  User  @relation(fields: [createdById], references: [id])

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
}

model PurchaseItem {
  id              Int            @id @default(autoincrement())
  description     String
  quantity        Int
  cost            Int
  purchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int?

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
}
