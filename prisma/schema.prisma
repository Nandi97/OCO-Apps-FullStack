generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  expires_in        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  stopWatchItems StopWatchItem[]
  purchaseOrders PurchaseOrder[]
  staff          Staff[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Menu {
  id        Int       @id @default(autoincrement())
  name      String
  url       String
  icon      String
  listOrder Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Matter {
  id             Int             @id @default(autoincrement())
  code           String
  description    String
  deletedAt      DateTime?
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime?       @updatedAt
  stopWatchItems StopWatchItem[]
}

model Team {
  id        Int         @id @default(autoincrement())
  name      String
  createdAt DateTime?   @default(now())
  updatedAt DateTime?   @updatedAt
  staff     Staff[]
  CauseList CauseList[]
}

model Gender {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  staff     Staff[]
}

model Town {
  id             String          @id @default(cuid())
  name           String          @unique
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime?       @updatedAt
  purchaseOrders PurchaseOrder[]
}

model Tax {
  id          String @id @default(cuid())
  name        String @unique
  description String @unique
  rate        Float  @unique

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  PurchaseOrder PurchaseOrder[]
}

model Currency {
  id      Int    @id @default(autoincrement())
  name    String
  initial String

  purchaseOrders PurchaseOrder[]
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime?       @updatedAt
}

model StaffType {
  id           Int           @id @default(autoincrement())
  name         String
  createdAt    DateTime?     @default(now())
  updatedAt    DateTime?     @updatedAt
  designations Designation[]
}

model Designation {
  id          Int       @id @default(autoincrement())
  name        String
  staffTypeId Int
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  staffType   StaffType @relation(fields: [staffTypeId], references: [id])
  staff       Staff[]
}

model Staff {
  id            String  @id @default(cuid())
  name          String
  email         String  @unique
  mobile        String
  ext           Int
  staffNo       Int
  avatarUrl     String?
  teamId        Int
  designationId Int
  genderId      Int

  leaveDays LeaveDays?

  purchaseOrders PurchaseOrder[]

  meetingAttendees MeetingAttendee[]

  employers   LeaveApplication[] @relation("employee")
  supervisors LeaveApplication[] @relation("supervisor")
  partners    LeaveApplication[] @relation("partner")
  hrms        LeaveApplication[] @relation("HR")

  createdById String?
  creator     User?       @relation(fields: [createdById], references: [id])
  designation Designation @relation(fields: [designationId], references: [id])
  gender      Gender      @relation(fields: [genderId], references: [id])
  team        Team        @relation(fields: [teamId], references: [id])

  deletedAt       DateTime?
  createdAt       DateTime?      @default(now())
  updatedAt       DateTime?      @updatedAt
  newsFeed        NewsFeed[]
  books           Book[]
  causeListCase   CauseListCase? @relation(fields: [causeListCaseId], references: [id])
  causeListCaseId String?
}

model Book {
  id              String  @id @default(cuid())
  author          String
  title           String
  coverUrl        String
  copies          Int
  edition         String
  isbnIssn        String
  mediaType       String
  publicationYear Int
  publisher       String
  subject         String?
  status          Boolean @default(true)
  userId          String?
  user            Staff?  @relation(fields: [userId], references: [id])

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model StopWatchItemTask {
  id             String          @id @default(cuid())
  name           String
  stopWatchItems StopWatchItem[]
}

model StopWatchItem {
  id                  Int               @id @default(autoincrement())
  narration           String
  itemDate            DateTime?
  startedAt           DateTime?
  endedAt             DateTime?
  createdById         String
  stopWatchItemTaskId String
  matterId            Int
  matter              Matter            @relation(fields: [matterId], references: [id])
  stopWatchItemTask   StopWatchItemTask @relation(fields: [stopWatchItemTaskId], references: [id])
  user                User              @relation(fields: [createdById], references: [id])
  deletedAt           DateTime?
  createdAt           DateTime?         @default(now())
  updatedAt           DateTime?         @updatedAt
}

model PurchaseOrder {
  id              String         @id @default(cuid())
  poNumber        String         @unique
  type            String
  taxId           String
  tax             Tax            @relation(fields: [taxId], references: [id])
  currencyId      Int
  name            String
  email           String
  phoneNumber     String
  physicalAddress String
  purchaseItems   PurchaseItem[]
  approverId      String
  createdById     String
  townId          String?
  address         Int?
  postalCode      Int?
  city            String?
  country         String?
  totalAmount     Int
  status          Boolean?       @default(false)
  approver        Staff          @relation(fields: [approverId], references: [id])
  creator         User           @relation(fields: [createdById], references: [id])
  currency        Currency       @relation(fields: [currencyId], references: [id])
  town            Town?          @relation(fields: [townId], references: [id])
  deletedAt       DateTime?
  createdAt       DateTime?      @default(now())
  updatedAt       DateTime?      @updatedAt
  approvedOn      DateTime?
}

model PurchaseItem {
  id              String         @id @default(cuid())
  description     String
  quantity        Int
  cost            Int
  purchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String?
  deletedAt       DateTime?
  createdAt       DateTime?      @default(now())
  updatedAt       DateTime?      @updatedAt
}

model AttendanceType {
  id               String            @id @default(cuid())
  name             String
  description      String
  createdAt        DateTime?         @default(now())
  updatedAt        DateTime?         @updatedAt
  MeetingAttendees MeetingAttendee[]
}

model MeetingAttendee {
  id            String         @id @default(cuid())
  meetingId     String
  staffId       String
  atendeeTypeId String
  meeting       Meeting        @relation(fields: [meetingId], references: [id])
  staff         Staff          @relation(fields: [staffId], references: [id])
  atendeeType   AttendanceType @relation(fields: [atendeeTypeId], references: [id])
  deletedAt     DateTime?
  createdAt     DateTime?      @default(now())
  updatedAt     DateTime?      @updatedAt
}

model Meeting {
  id           String            @id @default(cuid())
  title        String
  date         DateTime
  startedAt    DateTime
  endedAt      DateTime
  venue        String
  meetingItems MeetingItem[]
  aob          AOB[]
  staff        MeetingAttendee[]
  deletedAt    DateTime?
  createdAt    DateTime?         @default(now())
  updatedAt    DateTime?         @updatedAt
}

model MeetingItem {
  id            String    @id @default(cuid())
  action        String
  responsibleId Int       @unique
  dueDate       DateTime?
  meetingId     String
  status        String
  meeting       Meeting   @relation(fields: [meetingId], references: [id])
  // responsible   Staff     @relation("person_responsible", fields: [responsibleId], references: [id])
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
}

model AOB {
  id        String    @id @default(cuid())
  item      String
  meetingId String
  meeting   Meeting   @relation(fields: [meetingId], references: [id])
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model LeaveType {
  id               String             @id @default(cuid())
  name             String
  description      String
  deletedAt        DateTime?
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @updatedAt
  LeaveApplication LeaveApplication[]
}

model LeaveApplication {
  id                 String    @id @default(cuid())
  employeeId         String
  employee           Staff     @relation("employee", fields: [employeeId], references: [id])
  supervisorId       String
  supervisor         Staff     @relation("supervisor", fields: [supervisorId], references: [id])
  leaveTypeId        String
  type               LeaveType @relation(fields: [leaveTypeId], references: [id])
  duration           Int
  startDate          DateTime
  endDate            DateTime
  reportDate         DateTime
  approvingPartnerId String
  partner            Staff     @relation("partner", fields: [approvingPartnerId], references: [id])
  approvingHRMId     String
  humanResource      Staff     @relation("HR", fields: [approvingHRMId], references: [id])

  supervisorApprovalId String?
  supervisorApproval   SupervisorApproval? @relation(fields: [supervisorApprovalId], references: [id])
  partnerApprovalId    String?
  partnerApproval      PartnerApproval?    @relation(fields: [partnerApprovalId], references: [id])
  hRMApprovalId        String?
  hRMApproval          HRMApproval?        @relation(fields: [hRMApprovalId], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model LeaveDays {
  id              String @id @default(cuid())
  daysEntitled    Float
  daysAccumulated Float
  daysTaken       Float
  balance         Float

  staffId String @unique
  staff   Staff  @relation(fields: [staffId], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model SupervisorApproval {
  id String @id @default(cuid())

  status            Int     @default(0)
  dispprovalComment String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  LeaveApplication LeaveApplication[]
}

model PartnerApproval {
  id String @id @default(cuid())

  status             Int     @default(0)
  disapprovalComment String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  LeaveApplication LeaveApplication[]
}

model HRMApproval {
  id String @id @default(cuid())

  status            Int     @default(0)
  dispprovalComment String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  LeaveApplication LeaveApplication[]
}

model NewsFeed {
  id   String   @id @default(cuid())
  date DateTime

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  articles Article[]
  user     Staff?    @relation(fields: [userId], references: [id])
  userId   String?
}

model Article {
  id      String @id @default(cuid())
  title   String
  content String
  url     String
  tags    String

  newsFeed   NewsFeed? @relation(fields: [newsFeedId], references: [id])
  newsFeedId String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model CauseList {
  id     String          @id @default(cuid())
  teamId Int
  team   Team            @relation(fields: [teamId], references: [id])
  date   DateTime
  cause  CauseListCase[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model CauseListCase {
  id      String  @id @default(cuid())
  coram   String
  virtual Boolean @default(false)
  case    String

  advocates   Staff[]
  causeList   CauseList? @relation(fields: [causeListId], references: [id])
  causeListId String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}
