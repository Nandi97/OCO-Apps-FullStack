generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  expires_in        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  stopWatchItems StopWatchItem[]
  purchaseOrders PurchaseOrder[]
  staff          Staff[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Menu {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  url       String    @unique
  icon      String
  listOrder Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Matter {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  description String
  deletedAt   DateTime?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt

  stopWatchItems StopWatchItem[]
}

model Team {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  createdAt DateTime?   @default(now())
  updatedAt DateTime?   @updatedAt
  staff     Staff[]
  CauseList CauseList[]
}

model Gender {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  staff     Staff[]
}

model Town {
  id             String          @id @default(cuid())
  name           String          @unique
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime?       @updatedAt
  purchaseOrders PurchaseOrder[]
}

model Tax {
  id          String @id @default(cuid())
  name        String @unique
  description String @unique
  rate        Float  @unique

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  PurchaseOrder PurchaseOrder[]
}

model Currency {
  id      Int    @id @default(autoincrement())
  name    String @unique
  initial String @unique

  purchaseOrders PurchaseOrder[]
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime?       @updatedAt
  asset          Asset[]
}

model StaffType {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  createdAt    DateTime?     @default(now())
  updatedAt    DateTime?     @updatedAt
  designations Designation[]
}

model Designation {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  staffTypeId Int
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  staffType   StaffType @relation(fields: [staffTypeId], references: [id])
  staff       Staff[]
}

model Staff {
  id              String  @id @default(cuid())
  name            String
  email           String  @unique
  mobile          String
  ext             Int
  staffNo         Int
  avatarUrl       String?
  teamId          Int
  designationId   Int
  genderId        Int
  causeListCaseId String?

  purchaseOrders PurchaseOrder[]

  meetingAttendees MeetingAttendee[]

  employers   LeaveApplication[] @relation("employee")
  supervisors LeaveApplication[] @relation("supervisor")
  partners    LeaveApplication[] @relation("partner")
  hrms        LeaveApplication[] @relation("HR")

  createdById   String?
  creator       User?          @relation(fields: [createdById], references: [id])
  designation   Designation    @relation(fields: [designationId], references: [id])
  gender        Gender         @relation(fields: [genderId], references: [id])
  team          Team           @relation(fields: [teamId], references: [id])
  causeListCase CauseListCase? @relation(fields: [causeListCaseId], references: [id])

  deletedAt        DateTime?
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @updatedAt
  newsFeed         NewsFeed[]
  books            Book[]
  causeList        CauseList[]
  fromUser         AssetTransaction[] @relation("fromUser")
  toUser           AssetTransaction[] @relation("toUser")
  asset            Asset[]            @relation("asset-creator")
  assetOwner       Asset[]            @relation("owner")
  assetTransaction AssetTransaction[] @relation("asset-transaction-creator")
  LeaveBalance     LeaveBalance[]
}

model Book {
  id              String  @id @default(cuid())
  author          String
  title           String  @unique
  coverUrl        String
  copies          Int
  edition         String
  isbnIssn        String
  mediaType       String
  publicationYear Int
  publisher       String
  subject         String?
  status          Boolean @default(true)
  userId          String?
  user            Staff?  @relation(fields: [userId], references: [id])

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model StopWatchItemTask {
  id             String          @id @default(cuid())
  name           String          @unique
  stopWatchItems StopWatchItem[]
}

model StopWatchItem {
  id                  Int               @id @default(autoincrement())
  narration           String
  itemDate            DateTime?
  startedAt           DateTime?
  endedAt             DateTime?
  createdById         String
  stopWatchItemTaskId String
  matterId            Int
  matter              Matter            @relation(fields: [matterId], references: [id])
  stopWatchItemTask   StopWatchItemTask @relation(fields: [stopWatchItemTaskId], references: [id])
  user                User              @relation(fields: [createdById], references: [id])
  deletedAt           DateTime?
  createdAt           DateTime?         @default(now())
  updatedAt           DateTime?         @updatedAt
}

model PurchaseOrder {
  id              String         @id @default(cuid())
  poNumber        String         @unique
  type            String
  taxId           String
  tax             Tax            @relation(fields: [taxId], references: [id])
  currencyId      Int
  name            String
  email           String
  phoneNumber     String
  physicalAddress String
  purchaseItems   PurchaseItem[]
  approverId      String
  createdById     String
  townId          String?
  address         Int?
  postalCode      Int?
  city            String?
  country         String?
  totalAmount     Int
  status          Boolean?       @default(false)
  approver        Staff          @relation(fields: [approverId], references: [id])
  creator         User           @relation(fields: [createdById], references: [id])
  currency        Currency       @relation(fields: [currencyId], references: [id])
  town            Town?          @relation(fields: [townId], references: [id])
  deletedAt       DateTime?
  createdAt       DateTime?      @default(now())
  updatedAt       DateTime?      @updatedAt
  approvedOn      DateTime?
}

model PurchaseItem {
  id              String         @id @default(cuid())
  description     String
  quantity        Int
  cost            Int
  purchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String?
  deletedAt       DateTime?
  createdAt       DateTime?      @default(now())
  updatedAt       DateTime?      @updatedAt
}

model AttendanceType {
  id               String            @id @default(cuid())
  name             String            @unique
  description      String
  createdAt        DateTime?         @default(now())
  updatedAt        DateTime?         @updatedAt
  MeetingAttendees MeetingAttendee[]
}

model MeetingAttendee {
  id            String         @id @default(cuid())
  meetingId     String
  staffId       String
  atendeeTypeId String
  meeting       Meeting        @relation(fields: [meetingId], references: [id])
  staff         Staff          @relation(fields: [staffId], references: [id])
  atendeeType   AttendanceType @relation(fields: [atendeeTypeId], references: [id])
  deletedAt     DateTime?
  createdAt     DateTime?      @default(now())
  updatedAt     DateTime?      @updatedAt
}

model Meeting {
  id           String            @id @default(cuid())
  title        String
  date         DateTime
  startedAt    DateTime
  endedAt      DateTime
  venue        String
  meetingItems MeetingItem[]
  aob          AOB[]
  staff        MeetingAttendee[]
  deletedAt    DateTime?
  createdAt    DateTime?         @default(now())
  updatedAt    DateTime?         @updatedAt
}

model MeetingItem {
  id            String    @id @default(cuid())
  action        String
  responsibleId Int       @unique
  dueDate       DateTime?
  meetingId     String
  status        String
  meeting       Meeting   @relation(fields: [meetingId], references: [id])
  // responsible   Staff     @relation("person_responsible", fields: [responsibleId], references: [id])
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
}

model AOB {
  id        String    @id @default(cuid())
  item      String
  meetingId String
  meeting   Meeting   @relation(fields: [meetingId], references: [id])
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model LeaveType {
  id          String @id @default(cuid())
  name        String @unique
  description String

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  leaveApplication LeaveApplication[]
}

model LeaveApplication {
  id                 String   @id @default(cuid())
  employeeId         String
  supervisorId       String
  leaveTypeId        String
  duration           Int
  startDate          DateTime
  endDate            DateTime
  reportDate         DateTime
  approvingPartnerId String
  approvingHRMId     String

  employee      Staff     @relation("employee", fields: [employeeId], references: [id])
  supervisor    Staff     @relation("supervisor", fields: [supervisorId], references: [id])
  type          LeaveType @relation(fields: [leaveTypeId], references: [id])
  partner       Staff     @relation("partner", fields: [approvingPartnerId], references: [id])
  humanResource Staff     @relation("HR", fields: [approvingHRMId], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  leaveSupervisorApproval LeaveSupervisorApproval[]
  leavePartnerApproval    LeavePartnerApproval[]
  leaveHRMApproval        LeaveHRMApproval[]
}

model LeaveSupervisorApproval {
  id                 String @id @default(cuid())
  leaveApplicationId String

  comments String
  status   Int    @default(0)

  leaveApplication LeaveApplication @relation(fields: [leaveApplicationId], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model LeavePartnerApproval {
  id                 String @id @default(cuid())
  leaveApplicationId String

  comments String
  status   Int    @default(0)

  leaveApplication LeaveApplication @relation(fields: [leaveApplicationId], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model LeaveHRMApproval {
  id                 String @id @default(cuid())
  leaveApplicationId String

  comments String
  status   Int    @default(0)

  leaveApplication LeaveApplication @relation(fields: [leaveApplicationId], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model LeaveBalance {
  id                    String @id @default(cuid())
  employeeId            String
  employee              Staff  @relation(fields: [employeeId], references: [id])
  annualEntitlement     Float
  balanceBroughtForward Float
  earned                Float
  taken                 Float
  sold                  Float
  forfeited             Float
  balanceCarryForward   Float

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([employeeId])
}

model NewsFeed {
  id   String   @id @default(cuid())
  date DateTime

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  articles Article[]
  user     Staff?    @relation(fields: [userId], references: [id])
  userId   String?
}

model Article {
  id      String @id @default(cuid())
  title   String
  content String
  url     String
  tags    String

  newsFeed   NewsFeed? @relation(fields: [newsFeedId], references: [id])
  newsFeedId String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model CauseList {
  id     String          @id @default(cuid())
  teamId Int
  team   Team            @relation(fields: [teamId], references: [id])
  date   DateTime
  cases  CauseListCase[]

  creatorId String?
  createdBy Staff?  @relation(fields: [creatorId], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model CauseListCase {
  id      String  @id @default(cuid())
  coram   String
  virtual Int
  url     String?
  case    String

  advocates   Staff[]
  causeList   CauseList? @relation(fields: [causeListId], references: [id])
  causeListId String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model AssetCategory {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  assetTypes AssetType[]
}

model AssetType {
  id              String  @id @default(cuid())
  name            String  @unique
  description     String
  assetCategoryId String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  assetCategory AssetCategory? @relation(fields: [assetCategoryId], references: [id])

  asset Asset[]
}

model AssetCondition {
  id          String @id @default(cuid())
  name        String @unique
  description String

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  asset Asset[]
}

model AssetTransactionType {
  id          String @id @default(cuid())
  name        String @unique
  description String

  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @updatedAt
  deletedAt        DateTime?
  assetTransaction AssetTransaction[]
}

model Asset {
  id              String  @id @default(cuid())
  name            String
  imageUrl        String?
  description     String
  serialNumber    String? @unique
  ocoTagNumber    String? @unique
  location        String
  purchaseDate    String?
  purchasePrice   Float?
  currencyId      Int?
  typeId          String
  conditionId     String
  currentlyWithId String?
  createdById     String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  type          AssetType      @relation(fields: [typeId], references: [id])
  condition     AssetCondition @relation(fields: [conditionId], references: [id])
  currentlyWith Staff?         @relation("owner", fields: [currentlyWithId], references: [id])
  createdBy     Staff?         @relation("asset-creator", fields: [createdById], references: [id])
  currency      Currency?      @relation(fields: [currencyId], references: [id])

  assetTransaction AssetTransaction[]
  maintenanceLog   AssetMaintenanceLog[]
}

model AssetTransaction {
  id                     String   @id @default(cuid())
  assetId                String
  assetTransactionTypeId String
  transactionDate        DateTime
  fromUserId             String?
  toUserId               String
  createdById            String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  asset           Asset                @relation(fields: [assetId], references: [id])
  transactionType AssetTransactionType @relation(fields: [assetTransactionTypeId], references: [id])
  fromUser        Staff?               @relation("fromUser", fields: [fromUserId], references: [id])
  toUser          Staff                @relation("toUser", fields: [toUserId], references: [id])
  createdBy       Staff?               @relation("asset-transaction-creator", fields: [createdById], references: [id])
}

// Maintenance Log model
model AssetMaintenanceLog {
  id              Int      @id @default(autoincrement())
  assetId         String
  maintenanceDate DateTime
  description     String?
  cost            Float?
  // Relationships

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  asset Asset @relation(fields: [assetId], references: [id])
}
