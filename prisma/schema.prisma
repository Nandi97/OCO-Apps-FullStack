generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  stopWatchItems StopWatchItem[]
  purchaseOrders PurchaseOrder[]
  staff          Staff[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Menu {
  id        Int       @id @default(autoincrement())
  name      String
  url       String
  icon      String
  listOrder Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  subMenus  SubMenu[]
}

model SubMenu {
  id        Int       @id @default(autoincrement())
  name      String
  url       String
  icon      String
  listOrder Int
  menuId    Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  menu      Menu      @relation(fields: [menuId], references: [id])
}

model Matter {
  id             Int             @id @default(autoincrement())
  code           String
  description    String
  deletedAt      DateTime?
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime?       @updatedAt
  stopWatchItems StopWatchItem[]
}

model Team {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  staff     Staff[]
}

model Gender {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  staff     Staff[]
}

model Town {
  id             Int             @id @default(autoincrement())
  name           String
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime?       @updatedAt
  purchaseOrders PurchaseOrder[]
}

model Currency {
  id      Int    @id @default(autoincrement())
  name    String
  initial String

  purchaseOrders PurchaseOrder[]
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime?       @updatedAt
}

model StaffType {
  id           Int           @id @default(autoincrement())
  name         String
  createdAt    DateTime?     @default(now())
  updatedAt    DateTime?     @updatedAt
  designations Designation[]
}

model Designation {
  id          Int       @id @default(autoincrement())
  name        String
  staffTypeId Int
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  staffType   StaffType @relation(fields: [staffTypeId], references: [id])
  staff       Staff[]
}

model Staff {
  id             Int             @id @default(autoincrement())
  name           String
  email          String
  mobile         String
  ext            Int
  staffNo        Int
  avatarUrl      String?
  teamId         Int
  designationId  Int
  genderId       Int
  deletedAt      DateTime?
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime?       @updatedAt
  books          Book[]
  purchaseOrders PurchaseOrder[]

  meetingAttendees MeetingAttendee[]

  createdById String?
  creator     User?       @relation(fields: [createdById], references: [id])
  designation Designation @relation(fields: [designationId], references: [id])
  gender      Gender      @relation(fields: [genderId], references: [id])
  team        Team        @relation(fields: [teamId], references: [id])
}

model Book {
  id              Int       @id @default(autoincrement())
  author          String
  title           String
  coverUrl        String
  copies          Int
  edition         String
  isbnIssn        String
  mediaType       String
  publicationYear Int
  publisher       String
  subject         String?
  status          Boolean   @default(true)
  staffId         Int
  deletedAt       DateTime?
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  staff           Staff     @relation(fields: [staffId], references: [id])
}

model StopWatchItemTask {
  id             Int             @id @default(autoincrement())
  name           String
  stopWatchItems StopWatchItem[]
}

model StopWatchItem {
  id                  Int               @id @default(autoincrement())
  narration           String
  itemDate            DateTime?
  startedAt           DateTime?
  endedAt             DateTime?
  createdById         String
  stopWatchItemTaskId Int
  matterId            Int
  matter              Matter            @relation(fields: [matterId], references: [id])
  stopWatchItemTask   StopWatchItemTask @relation(fields: [stopWatchItemTaskId], references: [id])
  user                User              @relation(fields: [createdById], references: [id])
  deletedAt           DateTime?
  createdAt           DateTime?         @default(now())
  updatedAt           DateTime?         @updatedAt
}

model PurchaseOrder {
  id              Int            @id @default(autoincrement())
  poNumber        String         @unique
  type            String
  vatable         Boolean        @default(true)
  currencyId      Int
  name            String
  email           String
  phoneNumber     String
  physicalAddress String
  purchaseItems   PurchaseItem[]
  approverId      Int
  createdById     String
  townId          Int?
  address         Int?
  postalCode      Int?
  city            String?
  country         String?
  totalAmount     Int
  status          Boolean?       @default(false)
  approver        Staff          @relation(fields: [approverId], references: [id])
  creator         User           @relation(fields: [createdById], references: [id])
  currency        Currency       @relation(fields: [currencyId], references: [id])
  town            Town?          @relation(fields: [townId], references: [id])
  deletedAt       DateTime?
  createdAt       DateTime?      @default(now())
  updatedAt       DateTime?      @updatedAt
  approvedOn      DateTime?
}

model PurchaseItem {
  id              Int            @id @default(autoincrement())
  description     String
  quantity        Int
  cost            Int
  purchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int?
  deletedAt       DateTime?
  createdAt       DateTime?      @default(now())
  updatedAt       DateTime?      @updatedAt
}

model AttendanceType {
  id               Int               @id @default(autoincrement())
  name             String
  description      String
  createdAt        DateTime?         @default(now())
  updatedAt        DateTime?         @updatedAt
  MeetingAttendees MeetingAttendee[]
}

model MeetingAttendee {
  id            Int            @id @default(autoincrement())
  meetingId     Int
  staffId       Int
  atendeeTypeId Int
  meeting       Meeting        @relation(fields: [meetingId], references: [id])
  staff         Staff          @relation(fields: [staffId], references: [id])
  atendeeType   AttendanceType @relation(fields: [atendeeTypeId], references: [id])

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Meeting {
  id           Int               @id @default(autoincrement())
  title        String
  date         DateTime
  startedAt    DateTime
  endedAt      DateTime
  venue        String
  meetingItems MeetingItem[]
  aob          AOB[]
  staff        MeetingAttendee[]
  deletedAt    DateTime?
  createdAt    DateTime?         @default(now())
  updatedAt    DateTime?         @updatedAt
}

model MeetingItem {
  id            Int       @id @default(autoincrement())
  action        String
  responsibleId Int       @unique
  dueDate       DateTime?
  meetingId     Int
  status        String
  meeting       Meeting   @relation(fields: [meetingId], references: [id])
  // responsible   Staff     @relation("person_responsible", fields: [responsibleId], references: [id])
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
}

model AOB {
  id        Int       @id @default(autoincrement())
  item      String
  meetingId Int
  meeting   Meeting   @relation(fields: [meetingId], references: [id])
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}
